/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

vertices
(
    (-17.2800 -20.1600 -11.5200)    // 0
    ( 17.2800 -20.1600 -11.5200)    // 1
    ( 17.2800  20.1600 -11.5200)    // 2
    (-17.2800  20.1600 -11.5200)    // 3
    (-17.2800 -20.1600  11.5200)    // 4
    ( 17.2800 -20.1600  11.5200)    // 5
    ( 17.2800  20.1600  11.5200)    // 6
    (-17.2800  20.1600  11.5200)    // 7
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (72 84 48)
    //hex (0 1 2 3 4 5 6 7) (144 168 96)
    simpleGrading
    (
        1           // x direction: uniform
        1           // y direction: uniform
        1           // z direction: uniform
    )
);

edges
(
);

boundary
(
    patch0_half0
    {
        type cyclic;
        neighbourPatch patch0_half1;
        faces
        (
            (0 4 7 3)
        );
        physicalType periodic;
    }

    patch0_half1
    {
        type cyclic;
        neighbourPatch patch0_half0;
        faces
        (
            (2 6 5 1)
        );
        physicalType periodic;
    }

    patch1_half0
    {
        type cyclic;
        neighbourPatch patch1_half1;
        faces
        (
            (4 5 6 7)
        );
        physicalType periodic;
    }

    patch1_half1
    {
        type cyclic;
        neighbourPatch patch1_half0;
        faces
        (
            (0 3 2 1)
        );
        physicalType periodic;
    }

    under_side
    {
        type patch;
        physicalType particleInflowOutflow;
        faces
        (
            (1 5 4 0)
        );
    }

    upper_side
    {
        type patch;
        physicalType particleInflowOutflow;
        faces
        (
            (3 7 6 2)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
