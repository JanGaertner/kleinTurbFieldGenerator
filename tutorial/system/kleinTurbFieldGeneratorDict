/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2312                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       dictionary;
    location    "system";
    object      kleinTurbFieldGeneratorDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Set the turbulent properties
Lt              6E-4;   // Turbulent length scale
turbIntensity   0.05;   // Turbulent intensity
nFilterCells       8;   // number of neighboring filter cells -- see [1]
UMean       (30 0 0);   // Mean velocity of the field

// Optional Parameters
// ===================

// Provide a cellSet, e.g., generated with topoSet, in which the 
// fluctuations are applied
// cellSet shearLayer;

// Alternatively one can provide a filtering function which will be multiplied
// with the generated turb. fluctuations
// UPrime = blendingFunction * UPrime

filteringFunction
{
    type coded;         // All OpenFOAM Function1 types are supported
    filterDir 1;        // Direction of the filter, e.g., a blending in y-axis
                        // 0 : x-axis
                        // 1 : y-axis
                        // 2 : z-axis
    
    // Example for a blending in y direction provided by the coded
    // environment. Note: x variable is always the input to the function
    // Only 1-D inputs are allowed.
    code
    #{
        const scalar H = 2.88E-3;
        const scalar deltaU = 30;
        const scalar delta = 5;//(deltaU/H/10.25);
        scalar f =  0.5*(std::tanh(((x+0.5*H)/H)*delta) - std::tanh(((x-0.5*H)/H)*delta));
        if (f<1E-6)
            f = 0;
        return f;
    #};
}